{"version":3,"sources":["webpack:///./src/components/profilepic.js","webpack:///./src/components/authorbio.js","webpack:///./src/templates/author-page.js","webpack:///./src/components/articlepreview.js"],"names":["ProfilePic","props","profilePic","avatar","edges","find","item","node","name","identifier","fixed","childImageSharp","alt","style","marginRight","rhythm","marginBottom","minWidth","borderRadius","imgStyle","GitHubLink","href","icon","TwitterLink","AuthorBio","author","display","summary","github","twitter","authorPageQuery","AuthorPage","data","pageContext","location","siteTitle","site","siteMetadata","title","AuthorData","posts","allMdx","description","map","frontmatter","key","fields","slug","date","postPath","excerpt","ArticlePreview","boxShadow","to"],"mappings":"iMA8CeA,IAxCI,SAACC,GAClB,IAiBMC,EAjBI,OAiBcC,OAAOC,MAAMC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,OAASP,EAAMQ,cAC3E,OAAKP,EAKH,kBAAC,IAAD,CACEQ,MAAOR,EAAWK,KAAKI,gBAAgBD,MACvCE,IAAKX,EAAMO,KACXK,MAAO,CACLC,YAAaC,YAAO,IACpBC,aAAc,EACdC,SAAU,GACVC,aAAc,QAEhBC,SAAU,CACRD,aAAc,SAdX,O,gKCpBLE,EAAa,SAACnB,GAClB,OAAKA,EAAMO,KAKT,uBAAGa,KAAI,sBAAwBpB,EAAMO,MAAQ,kBAAC,IAAD,CAAiBc,KAAM,CAAC,MAAO,aAJrE,MAQLC,EAAc,SAACtB,GACnB,OAAKA,EAAMO,KAKT,uBAAGa,KAAI,uBAAyBpB,EAAMO,MAAQ,kBAAC,IAAD,CAAiBc,KAAM,CAAC,MAAO,cAJtE,MAiCIE,EAzBG,SAACvB,GACjB,IAAMwB,EAASxB,EAAMwB,OACfhB,EAAaR,EAAMQ,WAEzB,OACE,yBACEI,MAAO,CACLa,QAAS,OACTV,aAAcD,YAAO,KAGvB,kBAAC,IAAD,CAAYN,WAAYA,EAAYD,KAAMiB,EAAOjB,OACjD,2BACGiB,EAAOE,SACP,oCAAGF,EAAOE,SAEV,IACD,kBAAC,EAAD,CAAYnB,KAAMiB,EAAOG,SACxB,IACD,kBAAC,EAAD,CAAapB,KAAMiB,EAAOI,a,gDCSrBC,GAFEC,UAzCI,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACjCC,EAAYH,EAAKI,KAAKC,aAAaC,MAEnCb,EAASc,EAAWN,EAAYR,QAChCe,EAAQR,EAAKS,OAAOrC,MAE1B,OACE,kBAAC,IAAD,CAAQ8B,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CACEG,MAAOb,EAAOjB,KACdkC,YAAajB,EAAOE,UAEtB,4BAAKF,EAAOjB,MACZ,kBAAC,EAAD,CAAWC,WAAYwB,EAAYR,OAAQA,OAAQA,IAEnD,wBACEZ,MAAO,CACLG,aAAcD,YAAO,MAIxByB,EAAMG,KAAI,YAAe,IAAZpC,EAAW,EAAXA,KACN+B,EAAQ/B,EAAKqC,YAAYN,MAC/B,OACE,kBAAC,IAAD,CACEO,IAAKtC,EAAKuC,OAAOC,KACjBtB,OAAQA,EAAOjB,KACfwC,KAAMzC,EAAKqC,YAAYI,KACvBC,SAAU1C,EAAKuC,OAAOG,SACtBX,MAAOA,EACPI,YAAanC,EAAKqC,YAAYF,YAC9BjC,WAAYwB,EAAYR,OACxByB,QAAS3C,EAAK2C,eAWE,e,qpPCtD5B,6DAyCeC,IAhCQ,SAAClD,GACtB,IAAMwB,EAASxB,EAAMwB,OACfuB,EAAO/C,EAAM+C,KACbC,EAAWhD,EAAMgD,SACjBX,EAAQrC,EAAMqC,MACdI,EAAczC,EAAMyC,YACpBQ,EAAUjD,EAAMiD,QAChBzC,EAAaR,EAAMQ,WAEzB,OACE,iCACE,gCACE,wBACEI,MAAO,CACLG,aAAcD,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMF,MAAO,CAAEuC,UAAW,QAAUC,GAAIJ,GACrCX,IAGL,kBAAC,IAAD,CAAQb,OAAQA,EAAQuB,KAAMA,EAAMvC,WAAYA,KAElD,iCACE,2BACGiC,GAAeQ,EADlB,IAC2B,kBAAC,OAAD,CAAMG,GAAIJ,GAAV","file":"component---src-templates-author-page-js-d9851cea6dca80b93390.js","sourcesContent":["import React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Image from \"gatsby-image\";\n\nimport { rhythm } from \"../utils/typography\";\n\nconst ProfilePic = (props) => {\n  const data = useStaticQuery(graphql`\n    query ProfilePicQuery {\n      avatar: allFile(filter: { absolutePath: { regex: \"/authors/\" } }) {\n        edges {\n          node {\n            name\n            childImageSharp {\n              fixed(width: 50, height: 50) {\n                ...GatsbyImageSharpFixed\n              }\n            }        \n          }\n        }\n      }\n    }\n  `);\n\n  const profilePic = data.avatar.edges.find(item => item.node.name === props.identifier);\n  if (!profilePic) {\n    return null;\n  }\n\n  return (\n    <Image\n      fixed={profilePic.node.childImageSharp.fixed}\n      alt={props.name}\n      style={{\n        marginRight: rhythm(1 / 2),\n        marginBottom: 0,\n        minWidth: 50,\n        borderRadius: \"100%\",\n      }}\n      imgStyle={{\n        borderRadius: \"50%\",\n      }}\n    />\n  );\n};\n\nexport default ProfilePic;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport ProfilePic from \"./profilepic\";\nimport { rhythm } from \"../utils/typography\";\n\nconst GitHubLink = (props) => {\n  if (!props.name) {\n    return null;\n  }\n\n  return (\n    <a href={`https://github.com/${props.name}`}><FontAwesomeIcon icon={[\"fab\", \"github\"]} /></a>\n  );\n};\n\nconst TwitterLink = (props) => {\n  if (!props.name) {\n    return null;\n  }\n\n  return (\n    <a href={`https://twitter.com/${props.name}`}><FontAwesomeIcon icon={[\"fab\", \"twitter\"]} /></a>\n  );\n};\n\nconst AuthorBio = (props) => {\n  const author = props.author;\n  const identifier = props.identifier;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        marginBottom: rhythm(1),\n      }}\n    >\n      <ProfilePic identifier={identifier} name={author.name} />\n      <p>\n        {author.summary &&\n         <>{author.summary}</>\n        }\n        {\" \"}\n        <GitHubLink name={author.github} />\n        {\" \"}\n        <TwitterLink name={author.twitter} />\n      </p>\n    </div>\n  );\n};\n\nexport default AuthorBio;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport AuthorBio from \"../components/authorbio\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport AuthorData from \"../../content/authors.json\";\nimport ArticlePreview from \"../components/articlepreview\";\nimport { rhythm } from \"../utils/typography\";\n\n\nconst AuthorPage = ({ data, pageContext, location }) => {\n  const siteTitle = data.site.siteMetadata.title;\n\n  const author = AuthorData[pageContext.author];\n  const posts = data.allMdx.edges;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={author.name}\n        description={author.summary}\n      />\n      <h1>{author.name}</h1>\n      <AuthorBio identifier={pageContext.author} author={author} />\n\n      <hr\n        style={{\n          marginBottom: rhythm(1),\n        }}\n      />\n\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title;\n        return (\n          <ArticlePreview\n            key={node.fields.slug}\n            author={author.name}\n            date={node.frontmatter.date}\n            postPath={node.fields.postPath}\n            title={title}\n            description={node.frontmatter.description}\n            identifier={pageContext.author}\n            excerpt={node.excerpt}\n          />\n        );\n      })}\n    </Layout>\n  );\n\n};\n\nexport default AuthorPage;\n\nexport const authorPageQuery = graphql`\n  query authorPageQuery($author: String!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(\n        filter: {frontmatter: {author: {eq: $author}}}\n        sort: { fields: [frontmatter___date], order: DESC }\n        limit: $limit\n    ) {\n        edges {\n        node {\n            fields {\n                slug,\n                postPath\n            }\n            frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                title\n                description\n            }\n        }\n      }\n    }\n  }\n`;","import React from \"react\";\nimport { Link } from \"gatsby\";\n\nimport Byline from \"./byline\";\nimport { rhythm } from \"../utils/typography\";\n\n/**\n * Article intro displayed on front page, archive, author page.\n */\nconst ArticlePreview = (props) => {\n  const author = props.author;\n  const date = props.date;\n  const postPath = props.postPath;\n  const title = props.title;\n  const description = props.description;\n  const excerpt = props.excerpt;\n  const identifier = props.identifier;\n\n  return (\n    <article>\n      <header>\n        <h3\n          style={{\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <Link style={{ boxShadow: \"none\" }} to={postPath}>\n            {title}\n          </Link>\n        </h3>\n        <Byline author={author} date={date} identifier={identifier}/>\n      </header>\n      <section>\n        <p>\n          {description || excerpt} <Link to={postPath}>Read more</Link>\n        </p>\n      </section>\n    </article>\n  );\n};\n\nexport default ArticlePreview;\n"],"sourceRoot":""}