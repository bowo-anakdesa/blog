{"version":3,"sources":["webpack:///./src/templates/blog-page.js","webpack:///./src/components/byline.js","webpack:///./src/components/articlepreview.js"],"names":["BlogPage","data","pageContext","location","siteTitle","site","siteMetadata","title","posts","allMdx","edges","currentPageNumber","previousPageNumber","nextPageNumber","previousPageLink","map","node","frontmatter","author","AuthorData","key","fields","slug","name","date","postPath","description","excerpt","style","display","flexWrap","justifyContent","listStyle","padding","to","rel","blogPageQuery","Byline","props","ArticlePreview","marginBottom","rhythm","boxShadow"],"mappings":"iPA8DeA,UAtDE,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC/BC,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,OAAOC,MAClBC,EAA0DT,EAA1DS,kBAAmBC,EAAuCV,EAAvCU,mBAAoBC,EAAmBX,EAAnBW,eACzCC,EAA0C,IAAvBF,EAAA,aAA0CA,EAEnE,OACE,kBAAC,IAAD,CAAQT,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAK,oBAAsBI,IAC/BH,EAAMO,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNT,EAAQS,EAAKC,YAAYV,MACzBW,EAASC,EAAWH,EAAKC,YAAYC,QAC3C,OACE,kBAAC,IAAD,CACEE,IAAKJ,EAAKK,OAAOC,KACjBJ,OAAQA,EAAOK,KACfC,KAAMR,EAAKC,YAAYO,KACvBC,SAAUT,EAAKK,OAAOI,SACtBlB,MAAOA,EACPmB,YAAaV,EAAKC,YAAYS,YAC9BC,QAASX,EAAKW,aAIpB,6BACE,wBACEC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGrB,GACC,kBAAC,OAAD,CAAMsB,GAAIpB,EAAkBqB,IAAI,QAAhC,oBAKJ,4BACGtB,GACC,kBAAC,OAAD,CAAMqB,GAAE,SAAWrB,EAAkBsB,IAAI,QAAzC,oBAaP,IAAMC,EAAa,a,0/DChE1B,yBAUeC,IARA,SAACC,GAAW,IACjBpB,EAAiBoB,EAAjBpB,OAAQM,EAASc,EAATd,KAEhB,OACE,oCAAGA,EAAH,gBAAsBN,K,kCCN1B,6DAwCeqB,IA/BQ,SAACD,GACtB,IAAMpB,EAASoB,EAAMpB,OACfM,EAAOc,EAAMd,KACbC,EAAWa,EAAMb,SACjBlB,EAAQ+B,EAAM/B,MACdmB,EAAcY,EAAMZ,YACpBC,EAAUW,EAAMX,QAEtB,OACE,iCACE,gCACE,wBACEC,MAAO,CACLY,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMb,MAAO,CAAEc,UAAU,QAAWR,GAAIT,GACrClB,IAGL,+BAAO,kBAAC,IAAD,CAAQW,OAAQA,EAAQM,KAAMA,MAEvC,iCACE,2BACGE,GAAeC,EADlB,IAC2B,kBAAC,OAAD,CAAMO,GAAIT,GAAV","file":"component---src-templates-blog-page-js-5813eb8ce2495d77ee55.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport AuthorData from \"../../content/authors.json\"\nimport ArticlePreview from \"../components/articlepreview\"\n\nconst BlogPage = ({ data, pageContext, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMdx.edges\n  const { currentPageNumber, previousPageNumber, nextPageNumber } = pageContext\n  const previousPageLink = previousPageNumber === 1 ? `/` : `/page/${previousPageNumber}`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={`All posts – Page ${currentPageNumber}`} />\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title\n        const author = AuthorData[node.frontmatter.author]\n        return (\n          <ArticlePreview\n            key={node.fields.slug}\n            author={author.name}\n            date={node.frontmatter.date}\n            postPath={node.fields.postPath}\n            title={title}\n            description={node.frontmatter.description}\n            excerpt={node.excerpt}\n          />\n        )\n      })}\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previousPageNumber && (\n              <Link to={previousPageLink} rel=\"prev\">\n                ← Previous page\n              </Link>\n            )}\n          </li>\n          <li>\n            {nextPageNumber && (\n              <Link to={`/page/${nextPageNumber}`} rel=\"next\">\n                Next page →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPage\n\nexport const blogPageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug,\n            postPath\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            author\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\n\nconst Byline = (props) => {\n  const { author, date } = props\n\n  return (\n    <>{date} – posted by {author}</>\n  )\n}\n\nexport default Byline\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Byline from \"./byline\"\nimport { rhythm } from \"../utils/typography\"\n\n/**\n * Article intro displayed on front page, archive, author page.\n */\nconst ArticlePreview = (props) => {\n  const author = props.author\n  const date = props.date\n  const postPath = props.postPath\n  const title = props.title\n  const description = props.description\n  const excerpt = props.excerpt\n\n  return (\n    <article>\n      <header>\n        <h3\n          style={{\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <Link style={{ boxShadow: `none` }} to={postPath}>\n            {title}\n          </Link>\n        </h3>\n        <small><Byline author={author} date={date} /></small>\n      </header>\n      <section>\n        <p>\n          {description || excerpt} <Link to={postPath}>Read more</Link>\n        </p>\n      </section>\n    </article>\n  )\n}\n\nexport default ArticlePreview\n"],"sourceRoot":""}